/*
 *  Twidere X
 *
 *  Copyright (C) 2020-2021 Tlaster <tlaster@outlook.com>
 * 
 *  This file is part of Twidere X.
 * 
 *  Twidere X is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  Twidere X is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with Twidere X. If not, see <http://www.gnu.org/licenses/>.
 */
package com.twidere.twiderex.db.sqldelight.paging

import androidx.paging.PagingSource
import com.squareup.sqldelight.Query
import com.squareup.sqldelight.Transacter
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.Dispatchers
import kotlin.properties.Delegates

internal abstract class QueryPagingSource<Key : Any, RowType : Any> :
    PagingSource<Key, RowType>(),
    Query.Listener {

    protected val relationQueryRegister = object : RelationQueryRegister {
        override fun addRelationQuery(query: Query<Any>) {
            query.addListener(this@QueryPagingSource)
            relationQueries.add(query)
        }
    }

    private val relationQueries = mutableListOf<Query<Any>>()

    protected var currentQuery: Query<RowType>? by Delegates.observable(null) { _, old, new ->
        old?.removeListener(this)
        new?.addListener(this)
        relationQueries.forEach {
            it.removeListener(this)
        }
        relationQueries.clear()
    }

    init {
        registerInvalidatedCallback {
            currentQuery?.removeListener(this)
            currentQuery = null
        }
    }

    final override fun queryResultsChanged() {
        invalidate()
    }
}

interface RelationQueryRegister {
    fun addRelationQuery(query: Query<Any>)
}

/**
 * Create a [PagingSource] that pages through results according to queries generated by
 * [queryProvider]. Queries returned by [queryProvider] should expect to do SQL offset/limit
 * based paging. For that reason, [countQuery] is required to calculate pages and page offsets.
 *
 * An example query returned by [queryProvider] could look like:
 *
 * ```sql
 * SELECT value FROM numbers
 * LIMIT 10
 * OFFSET 100;
 * ```
 *
 * Queries will be executed on [dispatcher].
 */
@Suppress("FunctionName")
fun <RowType : Any> QueryPagingSource(
    countQuery: Query<Long>,
    transacter: Transacter,
    dispatcher: CoroutineDispatcher = Dispatchers.IO,
    queryProvider: (limit: Long, offset: Long, relationQueryRegister: RelationQueryRegister) -> Query<RowType>,
): PagingSource<Int, RowType> = OffsetQueryPagingSource(
    queryProvider,
    countQuery,
    transacter,
    dispatcher
)
